(function a(appSpace) {


    //===========================================================================================================

<cute>

    //===========================================================================================================


    var BaseList = function (typeOfList, keeper, collect) { //Класс для работы с коллекцией документов
        var collection = [];
        this.keeper = keeper;
        if (!typeOfList) throw new Error("Type is not response");
        if (!keeper) throw new Error("Keeper is not response");

        this.Add = function (elements) {
            if ($.isArray(elements)) {
                for (var i = 0; i < elements.length; i++) {
                    if (!elements[i].id) {
                        throw new Error("Element index: " + i + " is not have id property");
                    }
                    if (collection[elements[i].id]) {
                        throw new Error("Element with id: " + elements[i].id + " is already exists");
                    }
                    collection[elements[i].id] = new typeOfList(elements[i], this);
                }
            } else if ($.isPlainObject(elements)) {
                if (!elements.id) {
                    throw new Error("Element is not have id property");
                }
                if (collection[elements.id]) {
                    throw new Error("Element with id: " + elements.id + " is already exists");
                }
                collection[elements.id] = new typeOfList(elements);
            } else {
                throw new Error('Error type: must be object or array');
            }
            return this.List();
        };

        this.Clear = function () {
            collection = [];
            return this.List();
        };

        this.Remove = function (id) {
            collection[id] = null;
            collection.remove(id);
            return this.List();
        };

        this.List = function (filter) {
            return collection;
        };

        this.Get = function (id) {
            return collection[id];
        };

        this.Add(collect);
        return this.List();
    };


    //===========================================================================================================


    var VisualElement = function (id, template, container) { //Базовый класс для всех визуальных элементов системы
        this.id = id;
        this.template = $(template);
        this.container = container || {};

        this.hide = function () {
            $(this.id).hide();
            return this;
        }

        this.show = function () {
            $(this.id).show();
            return this;
        }

        this.element = function(element){
            if (!element){
                return $(this.id);
            }else{
                return $(this.id).find(element);
            }
        }

        this.isVisible = function () {
            return $(this.id).is(":visible");
        }

        this.resize = function (width, height) {
            for (var el in container) {
                this.container[el].resize(width, height);
            }
        }
